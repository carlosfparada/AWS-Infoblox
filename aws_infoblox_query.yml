---

- name: Get nodes from Inventory and add to Groups
  hosts: localhost
  connection: local
  gather_facts: no
  vars_files: vars/main.yml
  tasks:
  - include_role: 
      name: utils_hosts_aws

- name: AWS Infoblox config
  hosts: localhost
  connection: local
  gather_facts: no
  vars_files: vars/main.yml
  tasks:
    - name: Set Provider Infoblox Data
      set_fact:
        provider:
          host: "{{ item.association.public_ip }}"
          username: "{{ username }}"
          password: "{{ password }}"
      loop: "{{ hostvars[groups['infoblox'][0]].network_interfaces }}"
      when: item.association is defined and item.association.public_ip is defined

    - name: Debug Provider Infoblox Data (Public IP, Username, Password) 
      debug:
        var: provider

    - name: Get Existing DNS Views
      ansible.builtin.set_fact:
        dns_views: "{{ lookup('infoblox.nios_modules.nios_lookup', 'view', provider=provider) }}"

    - name: For the single dns view particular case (it returns a dict)
      set_fact:
        dns_views: "{{ [ dns_views ] }}"
      when: dns_views | type_debug != "list"

    - name: Debug Existing DNS Views
      debug:
        msg: "DNS Views: {{ item.name }}"
      loop: "{{ dns_views }}"

    - name: Get Existing DNS Zone
      ansible.builtin.set_fact:
        dns_zones: "{{ lookup('infoblox.nios_modules.nios_lookup', 'zone_auth', provider=provider) }}"

    - name: For the single dns zone particular case (it returns a dict)
      set_fact:
        dns_zones: "{{ [ dns_zones ] }}"
      when: dns_zones | type_debug != "list"

    - name: Debug Existing DNS Zones
      debug: 
        msg: "DNS Zones: {{ item.fqdn }}"
      loop: "{{ dns_zones }}"

    - name: Get Existing Network Views
      ansible.builtin.set_fact:
        network_views: "{{ lookup('infoblox.nios_modules.nios_lookup', 'networkview', provider=provider) }}"

    - name: For the single network view particular case (it returns a dict)
      set_fact:
        network_views: "{{ [ network_views ] }}"
      when: network_views | type_debug != "list"

    - name: Debug Existing Network Views
      debug:
        msg: "Network Views: {{ item.name }}"
      loop: "{{ network_views }}"

    - name: Get Existing Networks
      ansible.builtin.set_fact:
        networks: "{{ lookup('infoblox.nios_modules.nios_lookup', 'network', network_view=network_view, provider=provider) }}"

    - name: For the single network particular case (it returns a dict)
      set_fact:
        networks: "{{ [ networks ] }}"
      when: networks | type_debug != "list"

    - name: Debug Existing Networks
      debug:
        msg: "Network: {{ item.network }}"
      loop: "{{ networks }}"

    - name: Get Existing A Records
      ansible.builtin.set_fact:
        arecords: "{{ lookup('infoblox.nios_modules.nios_lookup', 'record:a', provider=provider) }}"

    - name: For the single A record particular case (it returns a dict)
      set_fact:
        arecords: "{{ [ arecords ] }}"
      when: arecords | type_debug != "list"

    - name: Debug Existing A Records
      debug:
        msg: "A Records: {{ item.arecords }}"
      loop: "{{ arecords }}"

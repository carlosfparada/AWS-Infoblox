---

- name: Create VPC {{ ec2_vpc_name }}
  amazon.aws.ec2_vpc_net:
    name: "{{ ec2_vpc_name }}"
    cidr_block: "{{ ec2_vpc_cidr }}"
    region: "{{ ec2_vpc_region }}"
    state: present
    tags:
      Name: "{{ ec2_vpc_name }}"
  register: vpc

- name: Create Subnet SRV in VPC
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ ec2_subnet_cidr_srv }}"
    region: "{{ ec2_vpc_region }}"
    az: "{{ ec2_subnet_az }}"
    state: present
    tags:
      Name: "{{ ec2_subnet_name_srv }}"
  register: subnet_srv

- name: Create Subnet MGMT in VPC
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ ec2_subnet_cidr_mgmt }}"
    region: "{{ ec2_vpc_region }}"
    az: "{{ ec2_subnet_az }}"
    state: present
    tags:
      Name: "{{ ec2_subnet_name_mgmt }}"
  register: subnet_mgmt

- name: Create Internet Gateway (IGW)
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ ec2_vpc_region }}"
    state: present
    tags:
      Name: "{{ ec2_igw_name }}"
  register: igw

- name: Create Route Table and IGW route
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ ec2_vpc_region }}"
    state: present
    tags:
      Name: "{{ ec2_rt_name }}"
    subnets:
      - "{{ subnet_srv.subnet.id }}"
      - "{{ subnet_mgmt.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"

- name: Create Security Group
  amazon.aws.ec2_security_group:
    name: "{{ ec2_sg_name }}"
    description: Allow all on ports
    state: present
    rules:
      - proto: tcp
        ports: "{{ ec2_sg_openports }}"
        cidr_ip: 0.0.0.0/0
        rule_desc: Allow all on ports
    region: "{{ ec2_vpc_region }}"
    vpc_id: "{{ vpc.vpc.id }}"
    tags:
      Name: "{{ ec2_sg_name }}"

- name: Get AMI by Name
  amazon.aws.ec2_ami_info:
    filters:
      #image-id: "{{ ec2_infoblox_image_id }}"
      name: "{{ ec2_infoblox_image_name }}"
    region: "{{ ec2_vpc_region }}"
  register: ami_infoblox_find

- name: Create FortiGate instance
  amazon.aws.ec2_instance:
    image_id: "{{ ami_infoblox_find.images[-1].image_id | default('') }}"
    instance_type: "{{ ec2_infoblox_flavor_name }}"
    security_group: "{{ ec2_sg_name }}"
    name: "{{ ec2_infoblox_instance_name }}"
    key_name: "{{ ec2_infoblox_key_name }}"
    region: "{{ ec2_vpc_region }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    # network:
    #   assign_public_ip: true
    tags:
      Name: "{{ ec2_infoblox_instance_name }}"
    state: running
  register: ec2_infoblox_instance

- name: Create and Attach ENI MGMT
  amazon.aws.ec2_eni:
    name: "{{ ec2_eni_name_srv }}"
    region: "{{ ec2_vpc_region }}"
    instance_id: "{{ ec2_infoblox_instance.instances[0].instance_id }}"
    device_index: 1
    subnet_id: "{{ subnet_mgmt.subnet.id }}"
    delete_on_termination: true
    attached: true
    state: present
  register: eni_mgmt

- name: ENI
  debug:
    var: eni_mgmt

- name: Allocate a new elastic IP to ENI MGMT
  amazon.aws.ec2_eip:
    device_id: eni_mgmt.eni_id
    in_vpc: true
    state: present
  register: eip_mgmt

- name: EIP
  debug:
    var: eip_mgmt

- name: Print Infoblox instance details
  ansible.builtin.debug:
    msg: "Instance DNS name is: {{ eip.public_dns }} with IP address {{ eip.public_ip }}"

# Wait for boot ups
- name: Wait until Infoblox boots up
  wait_for:
    port: 22
    state: started
    timeout: 600
    delay: 30
    host: "{{ eip.public_dns }}"

# - name: Sleep for 30 seconds and continue with play
#   wait_for:
#     timeout: 30
#   delegate_to: localhost
